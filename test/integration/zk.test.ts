import { prepareCircuitInputs } from '../../src/util/zk/inputs';
import { generateGroth16Proof } from '../../src/util/zk/prover';
// @ts-ignore
import { clientParams } from './util/client.params';
import { VocdoniSDKClient } from '../../src';

describe('zkSNARK test', () => {
  it('should calculate the proof correctly', async () => {
    const client = new VocdoniSDKClient(clientParams());
    const apiInputs = {
      availableWeight: '10',
      cikRoot: '8249099760907167789571303445229571020142579550816399551344063388758746358298',
      cikSiblings: [
        '7548158814310825343542451035513910435175908869118880827293082019140308928765',
        '7621616467852048598984306939476316508903164606437232069863966962716987421574',
        '0',
        '18616412528782094425570523485399800126649249730262010043759673549343655698710',
        '9435966446765861998449762818553607928871451298821960692184639206470581874262',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
      ],
      censusRoot: '11177228488345865753134984371979258733075585988910587528690250331384779468608',
      censusSiblings: [
        '12940653407944391992631250845953962507824817648629121074758866002450631761908',
        '21269862985882725828037322963542871197672714891820625500210977910628481463112',
        '0',
        '134181927717507984641610333591947729623167601209884374561715717589118869884',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
        '0',
      ],
    };
    const clientInputs = {
      electionId: '7faeab7a7d250527d614e952ae8e446825bd1124c6def410844c7c383d1519a6',
      address: 'B1F05B11Ba3d892EdD00f2e7689779E2B8841827',
      password: 'df8634ab3b14536cb7a6953b1128ec6742726483bc5bb13605891600fd5ec35b',
      signature:
        '3a7806f4e0b5bda625d465abf5639ba42ac9b91bafea3b800a4afff840be8d55333c286c7e21c91850a99efb5008847eaf653e3a5776f64f4d3b405afd5dcde61c',
      voteWeight: '5',
    };

    const inputs = await prepareCircuitInputs(
      // client inputs
      clientInputs.electionId,
      clientInputs.address,
      clientInputs.password,
      clientInputs.signature,
      clientInputs.voteWeight,
      // api inputs
      apiInputs.availableWeight,
      apiInputs.cikRoot,
      apiInputs.cikSiblings,
      apiInputs.censusRoot,
      apiInputs.censusSiblings
    );

    const circuits = await client.fetchCircuits({
      zKeyHash: 'a42bf48a706aa24a78e364f769d9576c3ee7b453fefacafdcee4e1335ff5365f',
      zKeyURI:
        'https://raw.githubusercontent.com/vocdoni/zk-franchise-proof-circuit/feature/new-circuit/artifacts/zkCensus/dev/160/proving_key.zkey',
      vKeyHash: '24c4c4f6ca2a48c41e95d324c48b4428d4794d7e6fbeb9c840221ad797bcae56',
      vKeyURI:
        'https://raw.githubusercontent.com/vocdoni/zk-franchise-proof-circuit/feature/new-circuit/artifacts/zkCensus/dev/160/verification_key.json',
      wasmHash: '0fe608036ef46ca58395c86b6b31b3c54edd79f331d003b7769c999ace38abfc',
      wasmURI:
        'https://raw.githubusercontent.com/vocdoni/zk-franchise-proof-circuit/feature/new-circuit/artifacts/zkCensus/dev/160/circuit.wasm',
    });

    await expect(generateGroth16Proof(inputs, circuits.wasmData, circuits.zKeyData)).resolves;
  }, 10000000);
});
